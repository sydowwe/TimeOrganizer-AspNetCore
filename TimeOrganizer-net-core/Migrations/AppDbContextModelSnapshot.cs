// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimeOrganizer_net_core;

#nullable disable

namespace TimeOrganizer_net_core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("AbstractEntityWithActivitySequence");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOnToDoList")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnavoidable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Activity", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Category", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Role", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.RoutineTimePeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHiddenInView")
                        .HasColumnType("boolean");

                    b.Property<int>("LengthInDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Text")
                        .IsUnique();

                    b.ToTable("RoutineTimePeriod", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.TaskUrgency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Priority")
                        .IsUnique();

                    b.HasIndex("UserId", "Text")
                        .IsUnique();

                    b.ToTable("TaskUrgency", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CurrentLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"AbstractEntityWithActivitySequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("TimeOrganizer_net_core.security.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.ActivityHistory", b =>
                {
                    b.HasBaseType("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ActivityId");

                    b.HasIndex("StartTimestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityHistory", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Alarm", b =>
                {
                    b.HasBaseType("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ActivityId");

                    b.HasIndex("StartTimestamp");

                    b.HasIndex("UserId");

                    b.ToTable("Alarm", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.PlannerTask", b =>
                {
                    b.HasBaseType("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("MinuteLength")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId", "StartTimestamp")
                        .IsUnique();

                    b.ToTable("PlannerTask", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.RoutineToDoList", b =>
                {
                    b.HasBaseType("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<long>("TimePeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("timePeriodId")
                        .HasColumnType("bigint");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TimePeriodId");

                    b.HasIndex("UserId", "ActivityId")
                        .IsUnique();

                    b.HasIndex("UserId", "TimePeriodId");

                    b.ToTable("RoutineToDoList", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.ToDoList", b =>
                {
                    b.HasBaseType("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<long>("TaskUrgencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("taskUrgencyId")
                        .HasColumnType("bigint");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TaskUrgencyId");

                    b.HasIndex("UserId", "ActivityId")
                        .IsUnique();

                    b.HasIndex("UserId", "TaskUrgencyId");

                    b.ToTable("ToDoList", "public");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.WebExtensionData", b =>
                {
                    b.HasBaseType("TimeOrganizer_net_core.model.entity.abs.AbstractEntityWithActivity");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId", "Domain")
                        .IsUnique();

                    b.ToTable("WebExtensionData", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.security.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.security.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Activity", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Category", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId");

                    b.HasOne("TimeOrganizer_net_core.model.entity.Role", "Role")
                        .WithMany("Activities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany("ActivityList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Category", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany("CategoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Role", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany("RoleList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.RoutineTimePeriod", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.TaskUrgency", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany("TaskUrgencyList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.ActivityHistory", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Activity", "Activity")
                        .WithMany("HistoryList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Alarm", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Activity", "Activity")
                        .WithMany("alarmList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.PlannerTask", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.RoutineToDoList", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.RoutineTimePeriod", "TimePeriod")
                        .WithMany("ToDoListItems")
                        .HasForeignKey("TimePeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("TimePeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.ToDoList", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.TaskUrgency", "TaskUrgency")
                        .WithMany("ToDoListItems")
                        .HasForeignKey("TaskUrgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany("ToDoListList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("TaskUrgency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.WebExtensionData", b =>
                {
                    b.HasOne("TimeOrganizer_net_core.model.entity.Activity", "Activity")
                        .WithMany("WebExtensionDataList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TimeOrganizer_net_core.model.entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Activity", b =>
                {
                    b.Navigation("HistoryList");

                    b.Navigation("WebExtensionDataList");

                    b.Navigation("alarmList");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Category", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.Role", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.RoutineTimePeriod", b =>
                {
                    b.Navigation("ToDoListItems");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.TaskUrgency", b =>
                {
                    b.Navigation("ToDoListItems");
                });

            modelBuilder.Entity("TimeOrganizer_net_core.model.entity.User", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("ActivityList");

                    b.Navigation("CategoryList");

                    b.Navigation("RoleList");

                    b.Navigation("TaskUrgencyList");

                    b.Navigation("ToDoListList");
                });
#pragma warning restore 612, 618
        }
    }
}
